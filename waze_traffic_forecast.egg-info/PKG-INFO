Metadata-Version: 2.4
Name: waze_traffic_forecast
Version: 0.1.0
Summary: Traffic forecasting with graph transformers using Waze data
Home-page: https://github.com/username/waze-traffic-forecast
Author: Michael Jerge
Author-email: mj6ux@virginia.edu
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: pandas>=1.3.0
Requires-Dist: numpy>=1.20.0
Requires-Dist: torch>=1.10.0
Requires-Dist: pyarrow>=6.0.0
Requires-Dist: matplotlib>=3.4.0
Requires-Dist: networkx>=2.6.0
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: tqdm>=4.62.0
Requires-Dist: pytz>=2021.1
Requires-Dist: pyyaml>=6.0
Provides-Extra: dev
Requires-Dist: pytest>=6.2.5; extra == "dev"
Requires-Dist: black>=21.6b0; extra == "dev"
Requires-Dist: flake8>=3.9.2; extra == "dev"
Requires-Dist: isort>=5.9.2; extra == "dev"
Requires-Dist: jupyter>=1.0.0; extra == "dev"
Requires-Dist: pytest-cov>=2.12.1; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Waze Traffic Forecast

Graph transformer-based traffic prediction using Waze data.

## Overview

This project implements a graph transformer architecture for traffic forecasting using Waze data. The model represents road topology and traffic patterns as dynamic graphs, where nodes represent junctions and endpoints, and edges capture traffic flow characteristics.

## Features

- Graph transformer architecture for traffic prediction
- Support for both subgraph and full graph training
- Sparse tensor implementation for memory efficiency
- Temporal snapshot creation for time-series analysis
- Multi-GPU training via HuggingFace Accelerate
- Experiment tracking with Weights & Biases

## Installation

### Setup Environment

```bash
# Create and activate conda environment
conda env create -f environment.yaml
conda activate waze-traffic
```

### Install Package

```bash
# Install in development mode
pip install -e .
```

## Usage

### Configuration

The model configuration is controlled through a YAML file (`config.yaml`). Important settings include:

```yaml
data:
  # Training on full graph vs subgraph
  full_graph: false  # Set to true for full graph training
  subgraph_nodes: 5000  # Max nodes when using subgraph
  batch_size: 1000  # Mini-batch size for full graph training
```

### Training

To train the model using the default sparse subgraph approach:

```bash
python scripts/train_model.py --config config.yaml
```

To train on the full graph using mini-batch training:

```bash
# Edit config.yaml to set data.full_graph: true
python scripts/train_model.py --config config.yaml
```

```bash
# Basic command with optimization
python scripts/train_model.py --config config.yaml --optimize
```

```bash
# Maximum performance setup
python scripts/train_model.py --config config.yaml --optimize --mixed_precision fp16 --batch_multiplier 8 --cache_data --num_workers 16
```

### Distributed Training

For multi-GPU training:

```bash
accelerate launch scripts/train_model.py --config config.yaml
```

### Additional Options

```bash
# Track experiments with Weights & Biases
python scripts/train_model.py --config config.yaml --wandb_project "waze-traffic"

# Resume from checkpoint
python scripts/train_model.py --config config.yaml --resume_from checkpoints/best_model.pt

# Use specific GPUs
CUDA_VISIBLE_DEVICES=0,1 accelerate launch scripts/train_model.py --config config.yaml
```

## Model Architecture

The implementation is based on the STGformer architecture, which combines:

1. **Graph Propagation Layer**: Models spatial dependencies through message passing
2. **Spatiotemporal Attention**: Captures both local and global dependencies
3. **Temporal Positional Encoding**: Preserves temporal ordering

## Dataset

The model can work with two training approaches:

1. **Sparse Subgraph (Default)**:
   - Samples a connected subgraph of important nodes
   - Uses sparse tensors for memory efficiency
   - Suitable for limited hardware resources

2. **Full Graph with Mini-Batches**:
   - Processes the entire graph through node neighborhood sampling
   - Trains on all nodes and edges
   - Requires more computational resources

## Project Structure

```
waze-traffic-forecast/
├── waze_traffic_forecast/          # Main package
│   ├── data/                      # Data processing modules
│   │   ├── graph_builder.py       # Graph construction
│   │   ├── preprocessor.py        # Data preprocessing
│   │   └── inspector.py           # Schema inspection
│   ├── models/                    # Model implementations
│   │   ├── layers.py              # Model layers
│   │   └── stgformer.py           # STGformer implementation
│   ├── dataset.py                 # Dataset implementation
│   └── _config.py                 # Configuration handling
├── scripts/                        # Executable scripts
│   ├── train_model.py             # Training script
│   ├── build_waze_graph.py        # Graph building script
│   └── inspect_waze_schema.py     # Schema inspection script
├── config.yaml                     # Configuration file
├── environment.yaml                # Conda environment file
├── setup.py                        # Package installation
└── README.md                       # This file
```

## Directory Details

- `config.yaml`: Default YAML configuration file for data, model, and training settings.
- `environment.yaml`: Conda environment specification for dependencies and setup.
- `run_slurm.slurm`: SLURM batch submission script for running jobs on HPC clusters.
- `output/`: Directory where model outputs, logs, and copied configurations are saved.
- `scripts/`: Collection of utility scripts for data processing, schema inspection, and training.
- `tests/`: Unit tests for validating data processing and model components.
- `waze_traffic_forecast/`: Core Python package containing modules for configuration, data handling, and model implementation.
- `waze_traffic_forecast.egg-info/`: Package metadata generated by setup.py (not for direct modification).

## Testing

To validate the functionality of data processing and model components, run the test suite:
```bash
pytest
```

## Citation

```
@inproceedings{waze-traffic-forecast,
  title={Graph Transformers for Traffic Forecasting},
  author={Potluri, Sravanth and Jerge, Michael M. and Sahay, Shreejeet},
  year={2025},
  organization={University of Virginia}
}
```

## License

This project is licensed under the terms of the MIT license.
